service cloud.firestore {
  function isAuthenticated() {
    return request.auth != null;
  }

   // Add uid of admin user 
  // This is temp solution for time being till fetching role from user document does not work
  function isAdmin() {
  	return isAuthenticated() && 
 Â   			(request.auth.uid == '');
  }

  function isUserAuthenticated(userId) {
    return isAuthenticated() && request.auth.uid == userId;
  }
  
  
  match /databases/{database}/documents {

<<<<<<< HEAD
     match /users/{userId} {
    // only allow creating user document when no roles specified
    // only allow updating user document when roles are not altered
    // updating of user happen via API and rules have no effect on API    
          allow read: if isUserAuthenticated(userId); 
          allow create: if isUserAuthenticated(userId) && !request.resource.data.keys().hasAny(['roles']);         
    			allow update: if isUserAuthenticated(userId) && 
          (!request.resource.data.keys().hasAny(['roles']) || (resource.data.roles == request.resource.data.roles));
=======
    match /users/{userId} {
    // only allow creating user document when no roles specified
    // only allow updating user document when roles are not altered
    // upading of user happen via API and rules have no effect on API    
          allow read: if isUserAuthenticated(userId); 
          allow create: if isUserAuthenticated(userId) && !request.resource.data.keys().hasAny(['roles']);         
    			allow update: if isUserAuthenticated(userId) && 
          (resource.data.roles == request.resource.data.roles);
>>>>>>> ba74c89a8905cc895004ab5ccfac0cd34b722560
    }
    
		match /{document=**} {
		allow read, write: if isAdmin();
		}
    
    match /categories {
      match /{document=**} {
        allow read;
      }
    }

    match /lists {
      match /{document=**} {
        allow read;
      }
    }
    
    match /questions {
      match /{document=**} {
        allow read: if isUserAuthenticated(resource.data.created_uid);
      }
    }
    
   match /unpublished_questions {
      match /{document=**} {
        allow read, update: if isUserAuthenticated(resource.data.created_uid);
        allow create: if isUserAuthenticated(request.resource.data.created_uid);
      }
    }
    
    match /bulk_uploads {
      match /{document=**} {
        allow read, update: if isUserAuthenticated(resource.data.created_uid);
        allow create: if isUserAuthenticated(request.resource.data.created_uid);
      }
    }
    
    match /games {
      match /{document=**} {
        allow read: if isUserAuthenticated(request.user.uid) || isUserAuthenticated(resource.data.playerId_0) || isUserAuthenticated(resource.data.playerId_1) || isUserAuthenticated(resource.data.nextTurnPlayerId);
        
      }
    }
    
     match /subscription/{email} {
     // create rule with data size ensure that there only two keys allowed
     // keys().hasAny ensure that only email, and userId are allowed as field
     // resource == null ensure when document does not exist it returns 
     // does not throw permission denied error
         allow create: if request.resource.data.size() < 3 && request.resource.data.keys().hasAny(['email', 'userId']);
         allow get: if resource.data.email.lower() == email.lower() || resource == null;         
      }
      

     match /invitations {
      	match /{document=**} {
      	allow create: if isUserAuthenticated(request.resource.data.created_uid);
        allow read,update: if resource.data.email == request.auth.token.email
      	}           
    }   
    
     match /leader_board_stats/categories { 
        allow get: if true;
    }
    
    match /friends/{userId} {
         allow get: if isUserAuthenticated(userId);          
    }
    
    match /report_questions {
      match /{document=**} {
        allow read, update: if isUserAuthenticated(resource.data.created_uid);
        allow create: if isUserAuthenticated(request.resource.data.created_uid);        
    }
    }
    
      match /stats/system {   
        allow get: if true;     
    }
    
    match /social_share {
      match /{document=**} {
        allow read,update : if isUserAuthenticated(request.resource.data.created_uid);
        allow create: if isUserAuthenticated(request.resource.data.created_uid); 
    }
    }
    
    match /blogs {    
      match /{document=**} {
        allow read,get: if true;  
      }      
    }

    match /application_settings {    
      match /{document=**} {
        allow read,get:  if true; 
      }      
    }
    
    match /accounts {    
      match /{document=**} {
        allow read,get:  if true; 
      }      
    }
    
    
  }
}
